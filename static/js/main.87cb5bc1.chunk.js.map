{"version":3,"sources":["App.js","index.js"],"names":["App","useState","showProgress","setShowProgress","counter","setCounter","fileToBeUpload","setFileToBeUpload","beginingOfTheChunk","setBeginingOfTheChunk","endOfTheChunk","setEndOfTheChunk","progress","setProgress","fileGuid","setFileGuid","fileSize","setFileSize","chunkCount","setChunkCount","progressInstance","ProgressBar","animated","now","label","toFixed","useEffect","fileUpload","chunk","slice","uploadChunk","a","axios","post","params","id","fileName","headers","response","data","isSuccess","console","log","uploadCompleted","errorMessage","formData","FormData","append","resetChunkProperties","Jumbotron","Form","Group","File","onChange","e","_file","target","files","size","_totalCount","Math","floor","_fileID","uuidv4","name","split","pop","style","display","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAuHeA,MAhHf,WACE,MAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4CJ,mBAAS,IAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAoDN,mBAAS,GAA7D,mBAAOO,EAAP,KAA2BC,EAA3B,KACA,EAA0CR,mBAP1B,SAOhB,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,EAAgCV,mBAAS,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAAgCZ,mBAAS,IAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KACA,EAAgCd,mBAAS,GAAzC,mBAAOe,EAAP,KAAiBC,EAAjB,KACA,EAAoChB,mBAAS,GAA7C,mBAAOiB,EAAP,KAAmBC,EAAnB,KAEMC,EAAmB,kBAACC,EAAA,EAAD,CAAaC,UAAQ,EAACC,IAAKX,EAAUY,MAAK,UAAKZ,EAASa,QAAQ,GAAtB,OAEnEC,qBAAU,WACJV,EAAW,GACbW,EAAWvB,KAEZ,CAACE,EAAgBM,IAEpB,IAcMe,EAAa,WAEjB,GADAtB,EAAWD,EAAU,GACjBA,GAAWc,EAAY,CACzB,IAAIU,EAAQtB,EAAeuB,MAAMrB,EAAoBE,GACrDoB,EAAYF,KAIVE,EAAW,uCAAG,WAAOF,GAAP,iBAAAG,EAAA,+EAEOC,IAAMC,KAAK,uDAAwDL,EAAO,CAC/FM,OAAQ,CACNC,GAAI/B,EACJgC,SAAUtB,GAEZuB,QAAS,CAAE,eAAgB,sBAPb,UAEVC,EAFU,SASVC,EAAOD,EAASC,MACbC,UAVO,oBAWd/B,EAAsBC,GACtBC,EAAiBD,EAvDP,SAwDNN,GAAWc,EAbD,wBAcZuB,QAAQC,IAAI,+BAAgCtC,GAdhC,UAgBNuC,IAhBM,gCAmBZ9B,EADkBT,EAAUc,EAAc,KAlB9B,gCAsBduB,QAAQC,IAAI,kBAAmBH,EAAKK,cAtBtB,0DA2BhBH,QAAQC,IAAI,QAAZ,MA3BgB,0DAAH,sDA+BXC,EAAe,uCAAG,8BAAAZ,EAAA,6DAClBc,EAAW,IAAIC,UACVC,OAAO,WAAYjC,GAFN,SAICkB,IAAMC,KAAK,yDAA0D,GAAI,CAC9FC,OAAQ,CACNE,SAAUtB,GAEZyB,KAAMM,IARc,OAIhBP,EAJgB,OAWTA,EAASC,KACbC,WACP3B,EAAY,KAbQ,2CAAH,qDAiBfmC,EAAuB,WAC3B7C,GAAgB,GAChBU,EAAY,GACZR,EAAW,GACXI,EAAsB,GACtBE,EAhGc,UAmGhB,OACE,kBAACsC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,KAAN,CAAWjB,GAAG,0BAA0BkB,SAlFzB,SAACC,GACtBN,IACA,IAAMO,EAAQD,EAAEE,OAAOC,MAAM,GAC7BxC,EAAYsC,EAAMG,MAElB,IAAMC,EAAcJ,EAAMG,KA1BZ,SA0BgC,EAAIH,EAAMG,KA1B1C,QA0B6DE,KAAKC,MAAMN,EAAMG,KA1B9E,SA0BkG,EAChHvC,EAAcwC,GAEdpD,EAAkBgD,GAClB,IAAMO,EAAUC,cAAW,IAAMR,EAAMS,KAAKC,MAAM,KAAKC,MACvDnD,EAAY+C,IAwE4DtC,MAAM,wBAE1E,kBAAC0B,EAAA,EAAKC,MAAN,CAAYgB,MAAO,CAAEC,QAASlE,EAAe,QAAU,SACpDkB,M,MCzGXiD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.87cb5bc1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ProgressBar, Jumbotron, Button, Form } from 'react-bootstrap'\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from \"axios\";\n\nconst chunkSize = 1048576 * 3;//its 3MB, increase the number measure in mb\n\nfunction App() {\n  const [showProgress, setShowProgress] = useState(false)\n  const [counter, setCounter] = useState(1)\n  const [fileToBeUpload, setFileToBeUpload] = useState({})\n  const [beginingOfTheChunk, setBeginingOfTheChunk] = useState(0)\n  const [endOfTheChunk, setEndOfTheChunk] = useState(chunkSize)\n  const [progress, setProgress] = useState(0)\n  const [fileGuid, setFileGuid] = useState(\"\")\n  const [fileSize, setFileSize] = useState(0)\n  const [chunkCount, setChunkCount] = useState(0)\n\n  const progressInstance = <ProgressBar animated now={progress} label={`${progress.toFixed(3)}%`} />;\n\n  useEffect(() => {\n    if (fileSize > 0) {\n      fileUpload(counter);\n    }\n  }, [fileToBeUpload, progress])\n\n  const getFileContext = (e) => {\n    resetChunkProperties();\n    const _file = e.target.files[0];\n    setFileSize(_file.size)\n\n    const _totalCount = _file.size % chunkSize == 0 ? _file.size / chunkSize : Math.floor(_file.size / chunkSize) + 1; // Total count of chunks will have been upload to finish the file\n    setChunkCount(_totalCount)\n\n    setFileToBeUpload(_file)\n    const _fileID = uuidv4() + \".\" + _file.name.split('.').pop();\n    setFileGuid(_fileID)\n  }\n\n\n  const fileUpload = () => {\n    setCounter(counter + 1);\n    if (counter <= chunkCount) {\n      var chunk = fileToBeUpload.slice(beginingOfTheChunk, endOfTheChunk);\n      uploadChunk(chunk)\n    }\n  }\n\n  const uploadChunk = async (chunk) => {\n    try {\n      const response = await axios.post(\"https://localhost:44356/weatherforecast/UploadChunks\", chunk, {\n        params: {\n          id: counter,\n          fileName: fileGuid,\n        },\n        headers: { 'Content-Type': 'application/json' }\n      });\n      const data = response.data;\n      if (data.isSuccess) {\n        setBeginingOfTheChunk(endOfTheChunk);\n        setEndOfTheChunk(endOfTheChunk + chunkSize);\n        if (counter == chunkCount) {\n          console.log('Process is complete, counter', counter)\n\n          await uploadCompleted();\n        } else {\n          var percentage = (counter / chunkCount) * 100;\n          setProgress(percentage);\n        }\n      } else {\n        console.log('Error Occurred:', data.errorMessage)\n      }\n\n    } catch (error) {\n      debugger\n      console.log('error', error)\n    }\n  }\n\n  const uploadCompleted = async () => {\n    var formData = new FormData();\n    formData.append('fileName', fileGuid);\n\n    const response = await axios.post(\"https://localhost:44356/weatherforecast/UploadComplete\", {}, {\n      params: {\n        fileName: fileGuid,\n      },\n      data: formData,\n    });\n\n    const data = response.data;\n    if (data.isSuccess) {\n      setProgress(100);\n    }\n  }\n\n  const resetChunkProperties = () => {\n    setShowProgress(true)\n    setProgress(0)\n    setCounter(1)\n    setBeginingOfTheChunk(0)\n    setEndOfTheChunk(chunkSize)\n  }\n\n  return (\n    <Jumbotron>\n      <Form>\n        <Form.Group>\n          <Form.File id=\"exampleFormControlFile1\" onChange={getFileContext} label=\"Example file input\" />\n        </Form.Group>\n        <Form.Group style={{ display: showProgress ? \"block\" : \"none\" }}>\n          {progressInstance}\n        </Form.Group>\n      </Form>\n    </Jumbotron >\n  );\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}